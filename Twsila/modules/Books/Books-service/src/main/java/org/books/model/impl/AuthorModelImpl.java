/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.books.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.books.model.Author;
import org.books.model.AuthorModel;
import org.books.model.AuthorSoap;

/**
 * The base model implementation for the Author service. Represents a row in the &quot;Books_Author&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AuthorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuthorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuthorImpl
 * @generated
 */
@JSON(strict = true)
public class AuthorModelImpl
	extends BaseModelImpl<Author> implements AuthorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a author model instance should use the <code>Author</code> interface instead.
	 */
	public static final String TABLE_NAME = "Books_Author";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"authorId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"nom", Types.VARCHAR}, {"prenom", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"DateNaissance", Types.TIMESTAMP},
		{"dateDeces", Types.TIMESTAMP}, {"autobiographie", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prenom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DateNaissance", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateDeces", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("autobiographie", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Books_Author (uuid_ VARCHAR(75) null,authorId LONG not null primary key,groupId LONG,companyId LONG,nom VARCHAR(75) null,prenom VARCHAR(75) null,email VARCHAR(75) null,DateNaissance DATE null,dateDeces DATE null,autobiographie VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Books_Author";

	public static final String ORDER_BY_JPQL = " ORDER BY author.nom ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Books_Author.nom ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AUTHORID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOM_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRENOM_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Author toModel(AuthorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Author model = new AuthorImpl();

		model.setUuid(soapModel.getUuid());
		model.setAuthorId(soapModel.getAuthorId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setNom(soapModel.getNom());
		model.setPrenom(soapModel.getPrenom());
		model.setEmail(soapModel.getEmail());
		model.setDateNaissance(soapModel.getDateNaissance());
		model.setDateDeces(soapModel.getDateDeces());
		model.setAutobiographie(soapModel.getAutobiographie());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Author> toModels(AuthorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Author> models = new ArrayList<Author>(soapModels.length);

		for (AuthorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AuthorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _authorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuthorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _authorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Author.class;
	}

	@Override
	public String getModelClassName() {
		return Author.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Author, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Author, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Author, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Author)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Author, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Author, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Author)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Author, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Author, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Author>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Author.class.getClassLoader(), Author.class, ModelWrapper.class);

		try {
			Constructor<Author> constructor =
				(Constructor<Author>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Author, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Author, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Author, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Author, Object>>();
		Map<String, BiConsumer<Author, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Author, ?>>();

		attributeGetterFunctions.put("uuid", Author::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Author, String>)Author::setUuid);
		attributeGetterFunctions.put("authorId", Author::getAuthorId);
		attributeSetterBiConsumers.put(
			"authorId", (BiConsumer<Author, Long>)Author::setAuthorId);
		attributeGetterFunctions.put("groupId", Author::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Author, Long>)Author::setGroupId);
		attributeGetterFunctions.put("companyId", Author::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Author, Long>)Author::setCompanyId);
		attributeGetterFunctions.put("nom", Author::getNom);
		attributeSetterBiConsumers.put(
			"nom", (BiConsumer<Author, String>)Author::setNom);
		attributeGetterFunctions.put("prenom", Author::getPrenom);
		attributeSetterBiConsumers.put(
			"prenom", (BiConsumer<Author, String>)Author::setPrenom);
		attributeGetterFunctions.put("email", Author::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Author, String>)Author::setEmail);
		attributeGetterFunctions.put("DateNaissance", Author::getDateNaissance);
		attributeSetterBiConsumers.put(
			"DateNaissance",
			(BiConsumer<Author, Date>)Author::setDateNaissance);
		attributeGetterFunctions.put("dateDeces", Author::getDateDeces);
		attributeSetterBiConsumers.put(
			"dateDeces", (BiConsumer<Author, Date>)Author::setDateDeces);
		attributeGetterFunctions.put(
			"autobiographie", Author::getAutobiographie);
		attributeSetterBiConsumers.put(
			"autobiographie",
			(BiConsumer<Author, String>)Author::setAutobiographie);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAuthorId() {
		return _authorId;
	}

	@Override
	public void setAuthorId(long authorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorId = authorId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAuthorId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("authorId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public String getNom() {
		if (_nom == null) {
			return "";
		}
		else {
			return _nom;
		}
	}

	@Override
	public void setNom(String nom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nom = nom;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNom() {
		return getColumnOriginalValue("nom");
	}

	@JSON
	@Override
	public String getPrenom() {
		if (_prenom == null) {
			return "";
		}
		else {
			return _prenom;
		}
	}

	@Override
	public void setPrenom(String prenom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prenom = prenom;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPrenom() {
		return getColumnOriginalValue("prenom");
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public Date getDateNaissance() {
		return _DateNaissance;
	}

	@Override
	public void setDateNaissance(Date DateNaissance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_DateNaissance = DateNaissance;
	}

	@JSON
	@Override
	public Date getDateDeces() {
		return _dateDeces;
	}

	@Override
	public void setDateDeces(Date dateDeces) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateDeces = dateDeces;
	}

	@JSON
	@Override
	public String getAutobiographie() {
		if (_autobiographie == null) {
			return "";
		}
		else {
			return _autobiographie;
		}
	}

	@Override
	public void setAutobiographie(String autobiographie) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_autobiographie = autobiographie;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Author.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Author toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Author>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuthorImpl authorImpl = new AuthorImpl();

		authorImpl.setUuid(getUuid());
		authorImpl.setAuthorId(getAuthorId());
		authorImpl.setGroupId(getGroupId());
		authorImpl.setCompanyId(getCompanyId());
		authorImpl.setNom(getNom());
		authorImpl.setPrenom(getPrenom());
		authorImpl.setEmail(getEmail());
		authorImpl.setDateNaissance(getDateNaissance());
		authorImpl.setDateDeces(getDateDeces());
		authorImpl.setAutobiographie(getAutobiographie());

		authorImpl.resetOriginalValues();

		return authorImpl;
	}

	@Override
	public int compareTo(Author author) {
		int value = 0;

		value = getNom().compareTo(author.getNom());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Author)) {
			return false;
		}

		Author author = (Author)object;

		long primaryKey = author.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Author> toCacheModel() {
		AuthorCacheModel authorCacheModel = new AuthorCacheModel();

		authorCacheModel.uuid = getUuid();

		String uuid = authorCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			authorCacheModel.uuid = null;
		}

		authorCacheModel.authorId = getAuthorId();

		authorCacheModel.groupId = getGroupId();

		authorCacheModel.companyId = getCompanyId();

		authorCacheModel.nom = getNom();

		String nom = authorCacheModel.nom;

		if ((nom != null) && (nom.length() == 0)) {
			authorCacheModel.nom = null;
		}

		authorCacheModel.prenom = getPrenom();

		String prenom = authorCacheModel.prenom;

		if ((prenom != null) && (prenom.length() == 0)) {
			authorCacheModel.prenom = null;
		}

		authorCacheModel.email = getEmail();

		String email = authorCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			authorCacheModel.email = null;
		}

		Date DateNaissance = getDateNaissance();

		if (DateNaissance != null) {
			authorCacheModel.DateNaissance = DateNaissance.getTime();
		}
		else {
			authorCacheModel.DateNaissance = Long.MIN_VALUE;
		}

		Date dateDeces = getDateDeces();

		if (dateDeces != null) {
			authorCacheModel.dateDeces = dateDeces.getTime();
		}
		else {
			authorCacheModel.dateDeces = Long.MIN_VALUE;
		}

		authorCacheModel.autobiographie = getAutobiographie();

		String autobiographie = authorCacheModel.autobiographie;

		if ((autobiographie != null) && (autobiographie.length() == 0)) {
			authorCacheModel.autobiographie = null;
		}

		return authorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Author, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Author, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Author, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Author)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Author, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Author, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Author, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Author)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Author>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _authorId;
	private long _groupId;
	private long _companyId;
	private String _nom;
	private String _prenom;
	private String _email;
	private Date _DateNaissance;
	private Date _dateDeces;
	private String _autobiographie;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Author, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Author)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("authorId", _authorId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("nom", _nom);
		_columnOriginalValues.put("prenom", _prenom);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("DateNaissance", _DateNaissance);
		_columnOriginalValues.put("dateDeces", _dateDeces);
		_columnOriginalValues.put("autobiographie", _autobiographie);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("authorId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("nom", 16L);

		columnBitmasks.put("prenom", 32L);

		columnBitmasks.put("email", 64L);

		columnBitmasks.put("DateNaissance", 128L);

		columnBitmasks.put("dateDeces", 256L);

		columnBitmasks.put("autobiographie", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Author _escapedModel;

}